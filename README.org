#+TITLE: VEGAFX (a very simple renderer for vega/lite specs)
* Purpose
Why should anyone have to spin up a webserver just to render plots?
We have JavaFX. We have webviews.  Let's combine them.

** Headless rendering
Uses the webview, plus some js scripts, to help communicate when charts are loaded
and to emit svg/png/html.  Since .snapshot doesn't work with hidden
components, we can't use it for saving images.  We also prefer to have
all the exacting image details from Vega....so we just use Vega and tell
it to give us an image.  Clojure captures the result and spits it to
a target file.
** Optional Visual Rendering as a Webview Component
We can still (and probably want to) render this to an interactive
JFX webview for use in other applications (e.g. plotting stuff).  We can
do this to.  We need to separate this out into a separate Vega component,
but for now visuals happen per-plot, creating a new stage and webview each time.

* Usage
#+BEGIN_SRC clojure
(require '[vegafx.core :as vfx])
(def test-spec {"$schema" "https://vega.github.io/schema/vega-lite/v2.0.json"
                  "data" {"values" [{"a" "A","b" 100}
                                    {"a" "B","b" 55}
                                    {"a" "C","b" 43}
                                    {"a" "D","b" 91}
                                    {"a" "E","b" 81}
                                    {"a" "F","b" 53}
                                    {"a" "G","b" 19}
                                    {"a" "H","b" 87}
                                    {"a" "I","b" 52}]}
                  "mark" "bar"
                  "encoding" {"x" {"field" "a", "type" "ordinal"}
                              "y" {"field" "b", "type" "quantitative"}}
                  "background" "white"})

;;These will all render without showing the webpage.
(vfx/vega->image test-spec "the-image")
(vfx/vega->image test-spec "the-image" :format :svg)
(vfx/vega->html  test-spec "the-page")
;;you'll get a javafx view of the plot.
(vfx/vega->image test-spec "another-image" :show? true)
;;Just render the plot, no spitting image...
(vfx/vega-lite test-spec :show? true)

(defn test-batch []
  (let [colors ["red" "white" "blue"]]
    (doseq [c colors]
      (let [spec (assoc test-spec "background" c)
            tgt  (str "./examples/" c)]
        (println [:spitting c])
        (vfx/vega->image spec tgt)
        (vfx/vega->image spec tgt :format :svg)
        (vfx/vega->html  spec tgt)))))
#+END_SRC

There is support for vega themes as well (WIP to ensure dark theme compatibility...):
#+BEGIN_SRC clojure
(require '[vegafx [core :as vfx] [config :as config]])
;;you can either bind a global options map
;;in vegafx.core/*options*, or pass :options args to client functions.
(defn theme-batch []
  (doseq [t config/themes]
    (let [tgt  (str "./examples/" t)]
      (binding [vfx/*options* (assoc vfx/*options* "theme" t)]
        (println [:spitting t])
        (vfx/vega->image test-spec tgt)
        (vfx/vega->image test-spec tgt :format :svg)
        (vfx/vega->html  test-spec tgt)))))
#+END_SRC

* JavaFX Versions
This lib was built against JavaFX 8, of which there isn't an easily acquired
OpenJFX lib for all platforms.  If you have oracle JDK 8, it includes JavaFX
automatically.  The only other JDK that does this (for Java 8), is Azul Systems
Zulu JDK Community Edition.  Ensuring JavaFX is available for other Java 8 JDK's is
an exercise for the reader.

If you are using this with Java 11, it should work, but you'll need a different
profile.  Borrowing from fn-fx's setup, we have an :openjfx11 profile.
You can alternately modify project.clj to use whatever your system is 
running as the default.

#+BEGIN_SRC bash
#use openjfx 11 dependencies
lein with-profile :openjfx11 repl
#install locally with the openjfx deps.
lein with-profile :openjfx11 install
#use whatever JavaFX is provided - typical for Java 8
lein repl
#install assuming JavaFX is provided
lein install
#+END_SRC

